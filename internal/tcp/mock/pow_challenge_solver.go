// Code generated by MockGen. DO NOT EDIT.
// Source: powtcptest/internal/tcp/client (interfaces: PoWChallengeSolver)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// PoWChallengeSolver is a mock of PoWChallengeSolver interface.
type PoWChallengeSolver struct {
	ctrl     *gomock.Controller
	recorder *PoWChallengeSolverMockRecorder
}

// PoWChallengeSolverMockRecorder is the mock recorder for PoWChallengeSolver.
type PoWChallengeSolverMockRecorder struct {
	mock *PoWChallengeSolver
}

// NewPoWChallengeSolver creates a new mock instance.
func NewPoWChallengeSolver(ctrl *gomock.Controller) *PoWChallengeSolver {
	mock := &PoWChallengeSolver{ctrl: ctrl}
	mock.recorder = &PoWChallengeSolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PoWChallengeSolver) EXPECT() *PoWChallengeSolverMockRecorder {
	return m.recorder
}

// SolveChallenge mocks base method.
func (m *PoWChallengeSolver) SolveChallenge(arg0 context.Context, arg1 string, arg2 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SolveChallenge", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SolveChallenge indicates an expected call of SolveChallenge.
func (mr *PoWChallengeSolverMockRecorder) SolveChallenge(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SolveChallenge", reflect.TypeOf((*PoWChallengeSolver)(nil).SolveChallenge), arg0, arg1, arg2)
}
