// Code generated by MockGen. DO NOT EDIT.
// Source: powtcptest/internal/tcp/server (interfaces: PoWChallengeProvider)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// PoWChallengeProvider is a mock of PoWChallengeProvider interface.
type PoWChallengeProvider struct {
	ctrl     *gomock.Controller
	recorder *PoWChallengeProviderMockRecorder
}

// PoWChallengeProviderMockRecorder is the mock recorder for PoWChallengeProvider.
type PoWChallengeProviderMockRecorder struct {
	mock *PoWChallengeProvider
}

// NewPoWChallengeProvider creates a new mock instance.
func NewPoWChallengeProvider(ctrl *gomock.Controller) *PoWChallengeProvider {
	mock := &PoWChallengeProvider{ctrl: ctrl}
	mock.recorder = &PoWChallengeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PoWChallengeProvider) EXPECT() *PoWChallengeProviderMockRecorder {
	return m.recorder
}

// GenerateChallenge mocks base method.
func (m *PoWChallengeProvider) GenerateChallenge() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChallenge")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateChallenge indicates an expected call of GenerateChallenge.
func (mr *PoWChallengeProviderMockRecorder) GenerateChallenge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChallenge", reflect.TypeOf((*PoWChallengeProvider)(nil).GenerateChallenge))
}

// VerifyChallenge mocks base method.
func (m *PoWChallengeProvider) VerifyChallenge(arg0, arg1 string, arg2 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyChallenge", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyChallenge indicates an expected call of VerifyChallenge.
func (mr *PoWChallengeProviderMockRecorder) VerifyChallenge(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyChallenge", reflect.TypeOf((*PoWChallengeProvider)(nil).VerifyChallenge), arg0, arg1, arg2)
}
